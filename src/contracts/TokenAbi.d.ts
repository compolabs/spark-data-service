/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.27.0
  Forc version: 0.32.2
  Fuel-Core version: 0.15.1
*/

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from "fuels";

import type { Enum } from "./common";

export type ErrorInput = Enum<{
  AddressAlreadyMint: [];
  CannotReinitialize: [];
  MintIsClosed: [];
  NotOwner: [];
}>;
export type ErrorOutput = ErrorInput;

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type ConfigInput = {
  name: string;
  symbol: string;
  decimals: BigNumberish;
};
export type ConfigOutput = { name: string; symbol: string; decimals: number };
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;

interface TokenAbiInterface extends Interface {
  functions: {
    already_minted: FunctionFragment;
    burn_coins: FunctionFragment;
    config: FunctionFragment;
    get_balance: FunctionFragment;
    get_mint_amount: FunctionFragment;
    get_token_balance: FunctionFragment;
    initialize: FunctionFragment;
    mint: FunctionFragment;
    mint_coins: FunctionFragment;
    set_mint_amount: FunctionFragment;
    transfer_coins: FunctionFragment;
    transfer_token_to_output: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "already_minted",
    values: [AddressInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "burn_coins",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(functionFragment: "config", values: []): Uint8Array;
  encodeFunctionData(functionFragment: "get_balance", values: []): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_mint_amount",
    values: []
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_token_balance",
    values: [ContractIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [ConfigInput, BigNumberish, AddressInput]
  ): Uint8Array;
  encodeFunctionData(functionFragment: "mint", values: []): Uint8Array;
  encodeFunctionData(
    functionFragment: "mint_coins",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "set_mint_amount",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "transfer_coins",
    values: [BigNumberish, AddressInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "transfer_token_to_output",
    values: [BigNumberish, ContractIdInput, AddressInput]
  ): Uint8Array;

  decodeFunctionData(
    functionFragment: "already_minted",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "burn_coins",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(functionFragment: "config", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_balance",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_mint_amount",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_token_balance",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "initialize",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(functionFragment: "mint", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "mint_coins",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "set_mint_amount",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "transfer_coins",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "transfer_token_to_output",
    data: BytesLike
  ): DecodedValue;
}

export class TokenAbi extends Contract {
  interface: TokenAbiInterface;
  functions: {
    already_minted: InvokeFunction<[address: AddressInput], boolean>;
    burn_coins: InvokeFunction<[burn_amount: BigNumberish], void>;
    config: InvokeFunction<[], ConfigOutput>;
    get_balance: InvokeFunction<[], BN>;
    get_mint_amount: InvokeFunction<[], BN>;
    get_token_balance: InvokeFunction<[asset_id: ContractIdInput], BN>;
    initialize: InvokeFunction<
      [config: ConfigInput, mint_amount: BigNumberish, owner: AddressInput],
      void
    >;
    mint: InvokeFunction<[], void>;
    mint_coins: InvokeFunction<[mint_amount: BigNumberish], void>;
    set_mint_amount: InvokeFunction<[mint_amount: BigNumberish], void>;
    transfer_coins: InvokeFunction<
      [coins: BigNumberish, address: AddressInput],
      void
    >;
    transfer_token_to_output: InvokeFunction<
      [coins: BigNumberish, asset_id: ContractIdInput, address: AddressInput],
      void
    >;
  };
}
